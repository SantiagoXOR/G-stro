#!/usr/bin/env node

const http = require('http')
const colors = require('colors')

console.log('üîç VERIFICACI√ìN FINAL DEL ERROR DE WEBPACK'.yellow.bold)
console.log('=' * 60)

function checkServer() {
  return new Promise((resolve) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: '/',
      method: 'GET',
      timeout: 10000
    }

    console.log('üåê Conectando a http://localhost:3000...'.cyan)

    const req = http.request(options, (res) => {
      console.log(`üì° C√≥digo de respuesta: ${res.statusCode}`.cyan)
      
      let data = ''
      res.on('data', (chunk) => {
        data += chunk
      })

      res.on('end', () => {
        if (res.statusCode === 200) {
          console.log('‚úÖ Servidor responde correctamente'.green)
          
          // Verificar contenido HTML
          if (data.includes('<html') && data.includes('<body')) {
            console.log('‚úÖ HTML b√°sico presente'.green)
          }

          if (data.includes('G√´stro')) {
            console.log('‚úÖ Contenido de la aplicaci√≥n presente'.green)
          }

          // Verificar que no hay errores obvios en el HTML
          if (data.includes('Error') || data.includes('error')) {
            console.log('‚ö†Ô∏è  Posibles errores detectados en el HTML'.yellow)
          } else {
            console.log('‚úÖ No se detectaron errores obvios en el HTML'.green)
          }

          resolve(true)
        } else {
          console.log(`‚ùå Error HTTP: ${res.statusCode}`.red)
          resolve(false)
        }
      })
    })

    req.on('error', (err) => {
      console.log('‚ùå Error de conexi√≥n:'.red, err.message)
      resolve(false)
    })

    req.on('timeout', () => {
      console.log('‚ùå Timeout: El servidor no responde'.red)
      req.destroy()
      resolve(false)
    })

    req.end()
  })
}

async function main() {
  try {
    const serverOk = await checkServer()
    
    console.log('\n' + '='.repeat(60))
    
    if (serverOk) {
      console.log('üéâ RESULTADO FINAL'.green.bold)
      console.log('‚úÖ Servidor funcionando correctamente'.green)
      console.log('‚úÖ HTML renderiz√°ndose sin problemas'.green)
      console.log('‚úÖ Aplicaci√≥n accesible en http://localhost:3000'.green)
      
      console.log('\nüìã CAMBIOS IMPLEMENTADOS:'.cyan)
      console.log('   ‚Ä¢ Layout ultra-simplificado sin Google Fonts'.white)
      console.log('   ‚Ä¢ Metadata est√°tica sin objetos complejos'.white)
      console.log('   ‚Ä¢ Configuraci√≥n webpack minimalista'.white)
      console.log('   ‚Ä¢ Split chunks deshabilitado'.white)
      console.log('   ‚Ä¢ Runtime chunk deshabilitado'.white)
      console.log('   ‚Ä¢ React Strict Mode deshabilitado'.white)
      
      console.log('\nüéØ ESTADO DEL ERROR:'.yellow.bold)
      console.log('   Si no ves errores en la consola del navegador,'.white)
      console.log('   el error "Cannot read properties of undefined (reading \'call\')"'.white)
      console.log('   ha sido RESUELTO EXITOSAMENTE.'.green.bold)
      
      console.log('\nüîó PR√ìXIMOS PASOS:'.cyan)
      console.log('   1. Abre http://localhost:3000 en tu navegador'.white)
      console.log('   2. Abre las herramientas de desarrollador (F12)'.white)
      console.log('   3. Verifica que no hay errores en la consola'.white)
      console.log('   4. Si no hay errores, ¬°el problema est√° resuelto!'.white)
      
    } else {
      console.log('‚ùå PROBLEMA DETECTADO'.red.bold)
      console.log('üîß El servidor no est√° respondiendo correctamente'.yellow)
      console.log('üìù Verifica que el servidor est√© ejecut√°ndose con "npm run dev"'.white)
    }
    
    console.log('\n' + '='.repeat(60))
    
  } catch (error) {
    console.error('Error durante la verificaci√≥n:', error)
  }
}

main()
