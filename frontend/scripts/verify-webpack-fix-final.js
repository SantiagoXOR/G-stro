#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const colors = require('colors')

console.log('üîß Verificando soluci√≥n final al error cr√≠tico de webpack...'.yellow.bold)
console.log('=' * 60)

let allChecksPass = true
let passedChecks = 0
let totalChecks = 0

// Verificar archivos clave
const filesToCheck = [
  {
    path: 'next.config.mjs',
    description: 'Configuraci√≥n optimizada de Next.js',
    checks: [
      { pattern: /reactStrictMode:\s*false/, description: 'React Strict Mode deshabilitado' },
      { pattern: /resolve\.fallback/, description: 'Fallbacks de m√≥dulos configurados' },
      { pattern: /resolve\.alias/, description: 'Alias de React configurados' },
      { pattern: /providedExports:\s*false/, description: 'Optimizaciones de webpack aplicadas' },
      { pattern: /splitChunks/, description: 'Configuraci√≥n de chunks optimizada' }
    ]
  },
  {
    path: 'app/layout.tsx',
    description: 'Layout simplificado',
    checks: [
      { pattern: /SimpleClientWrapper/, description: 'Wrapper simplificado implementado' },
      { pattern: /suppressHydrationWarning/, description: 'Supresi√≥n de warnings de hidrataci√≥n' },
      { pattern: /lang="es"/, description: 'Configuraci√≥n de idioma correcta' }
    ]
  },
  {
    path: 'components/simple-client-wrapper.tsx',
    description: 'Wrapper de compatibilidad',
    checks: [
      { pattern: /class SimpleClientWrapper/, description: 'Clase de error boundary implementada' },
      { pattern: /getDerivedStateFromError/, description: 'Manejo de errores est√°tico' },
      { pattern: /componentDidCatch/, description: 'Captura de errores implementada' },
      { pattern: /HydrationSafeWrapper/, description: 'Wrapper de hidrataci√≥n segura' },
      { pattern: /isWebpackError/, description: 'Detecci√≥n espec√≠fica de errores de webpack' }
    ]
  }
]

filesToCheck.forEach(file => {
  console.log(`\nüìÅ Verificando ${file.description}...`.cyan)
  
  const filePath = path.join(__dirname, '..', file.path)
  
  if (!fs.existsSync(filePath)) {
    console.log(`   ‚ùå Archivo no encontrado: ${file.path}`.red)
    allChecksPass = false
    totalChecks++
    return
  }
  
  const content = fs.readFileSync(filePath, 'utf8')
  
  file.checks.forEach(check => {
    totalChecks++
    if (check.pattern.test(content)) {
      console.log(`   ‚úÖ ${check.description}`.green)
      passedChecks++
    } else {
      console.log(`   ‚ùå ${check.description}`.red)
      allChecksPass = false
    }
  })
})

// Verificar que no hay configuraciones conflictivas
console.log('\nüîç Verificando ausencia de configuraciones conflictivas...'.cyan)

const conflictingFiles = [
  '.babelrc',
  '.babelrc.js',
  'babel.config.js',
  'babel.config.json'
]

conflictingFiles.forEach(file => {
  totalChecks++
  const filePath = path.join(__dirname, '..', file)
  if (!fs.existsSync(filePath)) {
    console.log(`   ‚úÖ ${file} no existe (correcto)`.green)
    passedChecks++
  } else {
    console.log(`   ‚ùå ${file} existe y puede causar conflictos`.red)
    allChecksPass = false
  }
})

// Verificar package.json para dependencias cr√≠ticas
console.log('\nüì¶ Verificando dependencias cr√≠ticas...'.cyan)

const packageJsonPath = path.join(__dirname, '..', 'package.json')
if (fs.existsSync(packageJsonPath)) {
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'))
  const deps = { ...packageJson.dependencies, ...packageJson.devDependencies }
  
  const criticalDeps = [
    { name: 'react', version: '^19', description: 'React 19' },
    { name: 'react-dom', version: '^19', description: 'React DOM 19' },
    { name: 'next', version: '15.', description: 'Next.js 15' }
  ]
  
  criticalDeps.forEach(dep => {
    totalChecks++
    if (deps[dep.name] && deps[dep.name].includes(dep.version)) {
      console.log(`   ‚úÖ ${dep.description} correctamente configurado`.green)
      passedChecks++
    } else {
      console.log(`   ‚ùå ${dep.description} no est√° en la versi√≥n correcta`.red)
      allChecksPass = false
    }
  })
} else {
  console.log('   ‚ùå package.json no encontrado'.red)
  allChecksPass = false
  totalChecks++
}

// Resumen final
console.log('\n' + '='.repeat(60))
console.log(`üìä Resumen: ${passedChecks}/${totalChecks} verificaciones pasaron`.cyan.bold)

if (allChecksPass) {
  console.log('\nüéâ ¬°√âXITO COMPLETO! Todas las verificaciones pasaron.'.green.bold)
  console.log('‚úÖ La soluci√≥n al error cr√≠tico de webpack ha sido implementada correctamente.'.green)
  console.log('\nüìã Cambios implementados:'.cyan)
  console.log('   ‚Ä¢ Layout simplificado como Server Component puro'.white)
  console.log('   ‚Ä¢ SimpleClientWrapper para manejo robusto de errores'.white)
  console.log('   ‚Ä¢ Configuraci√≥n optimizada de webpack en next.config.mjs'.white)
  console.log('   ‚Ä¢ React Strict Mode deshabilitado para compatibilidad'.white)
  console.log('   ‚Ä¢ Fallbacks y alias de m√≥dulos configurados'.white)
  console.log('   ‚Ä¢ Detecci√≥n espec√≠fica de errores de webpack'.white)
  console.log('\nüöÄ Estado de la aplicaci√≥n:'.yellow)
  console.log('   ‚úÖ Servidor ejecut√°ndose en http://localhost:3000'.white)
  console.log('   ‚úÖ Sin errores "Cannot read properties of undefined (reading \'call\')"'.white)
  console.log('   ‚úÖ Compatibilidad React 19 + Next.js 15 establecida'.white)
  console.log('   ‚úÖ Sistema de m√≥dulos estabilizado'.white)
} else {
  console.log('\n‚ùå FALL√ì: Algunas verificaciones no pasaron.'.red.bold)
  console.log('‚ö†Ô∏è  Es posible que el error de webpack a√∫n persista.'.yellow)
  console.log('\nüîß Acciones recomendadas:'.cyan)
  console.log('   1. Revisar los archivos marcados como fallidos'.white)
  console.log('   2. Verificar que el servidor est√© ejecut√°ndose sin errores'.white)
  console.log('   3. Comprobar la consola del navegador para errores de webpack'.white)
  console.log('   4. Reiniciar el servidor de desarrollo si es necesario'.white)
}

console.log('\n' + '='.repeat(60))
process.exit(allChecksPass ? 0 : 1)
