#!/usr/bin/env node

const fs = require('fs')
const path = require('path')

console.log('üñºÔ∏è  Verificando configuraci√≥n de im√°genes de Next.js...\n')

// Verificar que next.config.mjs existe
const configPath = path.join(__dirname, '../next.config.mjs')
if (!fs.existsSync(configPath)) {
  console.log('‚ùå next.config.mjs no encontrado')
  process.exit(1)
}

console.log('‚úÖ next.config.mjs encontrado')

// Leer y verificar configuraci√≥n
try {
  const configContent = fs.readFileSync(configPath, 'utf8')
  
  // Dominios que deben estar configurados
  const requiredDomains = [
    'img.clerk.com',
    'images.clerk.dev',
    'clerk.com',
    'lh3.googleusercontent.com',
    'googleusercontent.com',
    'avatars.githubusercontent.com',
    'www.gravatar.com',
    'gravatar.com'
  ]
  
  console.log('\nüîç Verificando dominios de im√°genes configurados:')
  
  const configuredDomains = []
  const missingDomains = []
  
  requiredDomains.forEach(domain => {
    if (configContent.includes(`hostname: '${domain}'`)) {
      configuredDomains.push(domain)
      console.log(`‚úÖ ${domain}`)
    } else {
      missingDomains.push(domain)
      console.log(`‚ùå ${domain}`)
    }
  })
  
  // Verificar configuraci√≥n de remotePatterns
  if (configContent.includes('remotePatterns:')) {
    console.log('\n‚úÖ Configuraci√≥n remotePatterns encontrada')
  } else {
    console.log('\n‚ùå Configuraci√≥n remotePatterns no encontrada')
  }
  
  // Verificar configuraci√≥n de optimizaci√≥n
  const optimizationFeatures = [
    'formats:',
    'deviceSizes:',
    'imageSizes:',
    'minimumCacheTTL:'
  ]
  
  console.log('\nüöÄ Verificando configuraci√≥n de optimizaci√≥n:')
  optimizationFeatures.forEach(feature => {
    if (configContent.includes(feature)) {
      console.log(`‚úÖ ${feature.replace(':', '')}`)
    } else {
      console.log(`‚ö†Ô∏è  ${feature.replace(':', '')} - No configurado`)
    }
  })
  
  // Resumen
  console.log('\nüìã Resumen:')
  console.log(`Dominios configurados: ${configuredDomains.length}/${requiredDomains.length}`)
  
  if (missingDomains.length > 0) {
    console.log('\n‚ùå Dominios faltantes:')
    missingDomains.forEach(domain => {
      console.log(`  - ${domain}`)
    })
  } else {
    console.log('\n‚úÖ Todos los dominios necesarios est√°n configurados')
  }
  
  // Verificar estructura del archivo
  console.log('\nüîß Verificando estructura del archivo:')
  
  if (configContent.includes('/** @type {import(\'next\').NextConfig} */')) {
    console.log('‚úÖ Tipo TypeScript configurado')
  } else {
    console.log('‚ö†Ô∏è  Tipo TypeScript no configurado')
  }
  
  if (configContent.includes('export default nextConfig')) {
    console.log('‚úÖ Exportaci√≥n ES6 configurada')
  } else {
    console.log('‚ùå Exportaci√≥n ES6 no configurada')
  }
  
  // Instrucciones para probar
  console.log('\nüß™ Para probar la configuraci√≥n:')
  console.log('1. Reinicia el servidor de desarrollo: npm run dev')
  console.log('2. Navega a: http://localhost:3000/profile')
  console.log('3. Inicia sesi√≥n con Google')
  console.log('4. Verifica que la imagen de perfil se carga sin errores')
  console.log('5. Revisa la consola del navegador para confirmar que no hay errores de im√°genes')
  
  console.log('\nüí° Dominios configurados para im√°genes:')
  console.log('- Clerk: img.clerk.com, images.clerk.dev, clerk.com')
  console.log('- Google: lh3.googleusercontent.com, googleusercontent.com')
  console.log('- GitHub: avatars.githubusercontent.com')
  console.log('- Gravatar: www.gravatar.com, gravatar.com')
  console.log('- Unsplash: images.unsplash.com, source.unsplash.com')
  console.log('- Otros: via.placeholder.com, picsum.photos')
  
} catch (error) {
  console.log('‚ùå Error al leer next.config.mjs:', error.message)
  process.exit(1)
}

console.log('\n‚úÖ Verificaci√≥n completada')
