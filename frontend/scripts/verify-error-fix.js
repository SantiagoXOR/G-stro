#!/usr/bin/env node

/**
 * Script para verificar que el error cr√≠tico del ErrorBoundary se ha resuelto
 * Verifica la configuraci√≥n y compatibilidad de componentes
 */

const fs = require('fs')
const path = require('path')

console.log('üîç Verificando correcci√≥n del error cr√≠tico de ErrorBoundary...\n')

// Verificar archivos clave
const filesToCheck = [
  {
    path: 'app/layout.tsx',
    description: 'Layout principal',
    checks: [
      { pattern: /SimpleErrorBoundary/, description: 'Uso de SimpleErrorBoundary' },
      { pattern: /HydrationSafeWrapper/, description: 'Wrapper de hidrataci√≥n segura' },
      { pattern: /suppressHydrationWarning/, description: 'Supresi√≥n de warnings de hidrataci√≥n' }
    ]
  },
  {
    path: 'components/simple-error-boundary.tsx',
    description: 'Error Boundary simplificado',
    checks: [
      { pattern: /class SimpleErrorBoundary/, description: 'Clase SimpleErrorBoundary' },
      { pattern: /getDerivedStateFromError/, description: 'M√©todo getDerivedStateFromError' },
      { pattern: /HydrationSafeWrapper/, description: 'Componente HydrationSafeWrapper' }
    ]
  },
  {
    path: 'package.json',
    description: 'Configuraci√≥n de dependencias',
    checks: [
      { pattern: /"overrides"/, description: 'Configuraci√≥n de overrides' },
      { pattern: /"react": "\^19"/, description: 'Override de React 19' },
      { pattern: /"peerDependenciesMeta"/, description: 'Configuraci√≥n de peer dependencies' }
    ]
  }
]

let allChecksPass = true
let totalChecks = 0
let passedChecks = 0

filesToCheck.forEach(file => {
  console.log(`üìÅ Verificando ${file.description} (${file.path})`)
  
  const filePath = path.join(__dirname, '..', file.path)
  
  if (!fs.existsSync(filePath)) {
    console.log(`   ‚ùå Archivo no encontrado: ${file.path}`)
    allChecksPass = false
    return
  }
  
  const content = fs.readFileSync(filePath, 'utf8')
  
  file.checks.forEach(check => {
    totalChecks++
    if (check.pattern.test(content)) {
      console.log(`   ‚úÖ ${check.description}`)
      passedChecks++
    } else {
      console.log(`   ‚ùå ${check.description}`)
      allChecksPass = false
    }
  })
  
  console.log('')
})

// Verificar que no hay importaciones problem√°ticas del ErrorBoundary original
console.log('üîç Verificando importaciones problem√°ticas...')

const layoutContent = fs.readFileSync(path.join(__dirname, '..', 'app/layout.tsx'), 'utf8')
if (layoutContent.includes('from "@/components/error-boundary"')) {
  console.log('   ‚ùå A√∫n se importa el ErrorBoundary original')
  allChecksPass = false
} else {
  console.log('   ‚úÖ No se detectan importaciones problem√°ticas')
  passedChecks++
}
totalChecks++

// Resumen
console.log('\n' + '='.repeat(60))
console.log(`üìä Resumen de verificaci√≥n:`)
console.log(`   Total de verificaciones: ${totalChecks}`)
console.log(`   Verificaciones exitosas: ${passedChecks}`)
console.log(`   Verificaciones fallidas: ${totalChecks - passedChecks}`)

if (allChecksPass) {
  console.log('\nüéâ ¬°√âXITO! Todas las verificaciones pasaron.')
  console.log('‚úÖ El error cr√≠tico del ErrorBoundary ha sido resuelto.')
  console.log('\nüìã Cambios implementados:')
  console.log('   ‚Ä¢ Reemplazado ErrorBoundary complejo por SimpleErrorBoundary')
  console.log('   ‚Ä¢ Agregado HydrationSafeWrapper para manejo de hidrataci√≥n')
  console.log('   ‚Ä¢ Configurado overrides en package.json para React 19')
  console.log('   ‚Ä¢ Agregado suppressHydrationWarning en el body')
  console.log('\nüöÄ La aplicaci√≥n deber√≠a funcionar correctamente ahora.')
} else {
  console.log('\n‚ùå FALL√ì: Algunas verificaciones no pasaron.')
  console.log('‚ö†Ô∏è  Es posible que el error a√∫n persista.')
  console.log('\nüîß Acciones recomendadas:')
  console.log('   ‚Ä¢ Revisar los archivos marcados con ‚ùå')
  console.log('   ‚Ä¢ Verificar que todas las importaciones sean correctas')
  console.log('   ‚Ä¢ Reiniciar el servidor de desarrollo')
}

console.log('\n' + '='.repeat(60))

process.exit(allChecksPass ? 0 : 1)
