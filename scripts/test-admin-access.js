#!/usr/bin/env node

/**
 * Script de Prueba de Acceso de Administrador - G√´stro
 * 
 * Este script verifica que el acceso de administrador funcione correctamente:
 * 1. Verifica que el usuario administrador existe
 * 2. Simula el flujo de autenticaci√≥n
 * 3. Verifica acceso a rutas protegidas
 * 4. Proporciona instrucciones detalladas para el usuario
 */

const { createClerkClient } = require('@clerk/backend');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: './frontend/.env.local' });

// Colores para la consola
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = colors.reset) {
  console.log(color + message + colors.reset);
}

async function main() {
  log('üîê VERIFICACI√ìN DE ACCESO DE ADMINISTRADOR - G√ãSTRO', colors.bright + colors.magenta);
  log('=' .repeat(60), colors.magenta);
  
  try {
    // Inicializar Clerk
    const clerkClient = createClerkClient({
      secretKey: process.env.CLERK_SECRET_KEY,
    });
    
    // Obtener usuarios administradores
    const users = await clerkClient.users.getUserList();
    const adminUsers = users.data.filter(user => user.unsafeMetadata?.role === 'admin');
    
    if (adminUsers.length === 0) {
      log('‚ùå No se encontraron usuarios administradores', colors.red);
      log('üí° Ejecuta: node scripts/diagnose-auth.js para crear uno', colors.yellow);
      process.exit(1);
    }
    
    log(`‚úÖ Usuarios administradores encontrados: ${adminUsers.length}`, colors.green);
    
    adminUsers.forEach((user, index) => {
      const email = user.emailAddresses[0]?.emailAddress || 'Sin email';
      const name = `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Sin nombre';
      log(`  ${index + 1}. ${email} (${name})`, colors.cyan);
    });
    
    log('\nüöÄ INSTRUCCIONES PARA ACCEDER AL PANEL DE ADMINISTRADOR:', colors.bright + colors.blue);
    log('=' .repeat(60), colors.blue);
    
    log('\nüìã PASO 1: Abrir la aplicaci√≥n', colors.bright + colors.yellow);
    log('‚Ä¢ Aseg√∫rate de que la aplicaci√≥n est√© ejecut√°ndose en http://localhost:3000', colors.yellow);
    log('‚Ä¢ Si no est√° ejecut√°ndose, ejecuta: cd frontend && npm run dev', colors.yellow);
    
    log('\nüìã PASO 2: Iniciar sesi√≥n', colors.bright + colors.yellow);
    log('‚Ä¢ Ve a: http://localhost:3000/auth/sign-in', colors.yellow);
    log('‚Ä¢ Usa una de estas credenciales de administrador:', colors.yellow);
    
    adminUsers.forEach((user, index) => {
      const email = user.emailAddresses[0]?.emailAddress;
      log(`  ${index + 1}. Email: ${email}`, colors.cyan);
      log(`     Contrase√±a: [La contrase√±a que configuraste para este usuario]`, colors.cyan);
    });
    
    log('\nüìã PASO 3: Acceder al panel de administrador', colors.bright + colors.yellow);
    log('‚Ä¢ Despu√©s de iniciar sesi√≥n, ve a: http://localhost:3000/admin', colors.yellow);
    log('‚Ä¢ Deber√≠as ver el panel de administrador con las siguientes secciones:', colors.yellow);
    log('  - Dashboard principal', colors.cyan);
    log('  - Gesti√≥n de usuarios', colors.cyan);
    log('  - Gesti√≥n de productos', colors.cyan);
    log('  - Gesti√≥n de pedidos', colors.cyan);
    log('  - Configuraci√≥n del restaurante', colors.cyan);
    
    log('\nüìã PASO 4: Verificar funcionalidades', colors.bright + colors.yellow);
    log('‚Ä¢ Prueba acceder a: http://localhost:3000/admin/users', colors.yellow);
    log('‚Ä¢ Deber√≠as poder ver y gestionar usuarios', colors.yellow);
    log('‚Ä¢ Prueba cambiar roles de usuarios', colors.yellow);
    
    log('\nüîß SOLUCI√ìN DE PROBLEMAS:', colors.bright + colors.red);
    log('=' .repeat(60), colors.red);
    
    log('\n‚ùå Si no puedes iniciar sesi√≥n:', colors.yellow);
    log('‚Ä¢ Verifica que el email y contrase√±a sean correctos', colors.cyan);
    log('‚Ä¢ Verifica que las variables de entorno de Clerk est√©n configuradas', colors.cyan);
    log('‚Ä¢ Revisa la consola del navegador para errores', colors.cyan);
    
    log('\n‚ùå Si no puedes acceder a /admin:', colors.yellow);
    log('‚Ä¢ Verifica que tu usuario tenga rol "admin"', colors.cyan);
    log('‚Ä¢ Revisa el middleware en frontend/middleware.ts', colors.cyan);
    log('‚Ä¢ Verifica que las pol√≠ticas RLS en Supabase est√©n configuradas', colors.cyan);
    
    log('\n‚ùå Si ves errores de "Acceso denegado":', colors.yellow);
    log('‚Ä¢ Ejecuta: node scripts/diagnose-auth.js para verificar roles', colors.cyan);
    log('‚Ä¢ Verifica que el perfil en Supabase tenga role="admin"', colors.cyan);
    
    log('\nüîç COMANDOS √öTILES PARA DIAGN√ìSTICO:', colors.bright + colors.green);
    log('=' .repeat(60), colors.green);
    log('‚Ä¢ node scripts/diagnose-auth.js - Diagn√≥stico completo', colors.cyan);
    log('‚Ä¢ node scripts/test-admin-access.js - Esta verificaci√≥n', colors.cyan);
    log('‚Ä¢ cd frontend && npm run dev - Ejecutar aplicaci√≥n', colors.cyan);
    log('‚Ä¢ cd frontend && npm run test - Ejecutar tests', colors.cyan);
    
    log('\nüì± RUTAS IMPORTANTES:', colors.bright + colors.green);
    log('=' .repeat(60), colors.green);
    log('‚Ä¢ http://localhost:3000 - P√°gina principal', colors.cyan);
    log('‚Ä¢ http://localhost:3000/auth/sign-in - Iniciar sesi√≥n', colors.cyan);
    log('‚Ä¢ http://localhost:3000/auth/sign-up - Registrarse', colors.cyan);
    log('‚Ä¢ http://localhost:3000/admin - Panel de administrador', colors.cyan);
    log('‚Ä¢ http://localhost:3000/admin/users - Gesti√≥n de usuarios', colors.cyan);
    log('‚Ä¢ http://localhost:3000/staff - Panel de staff', colors.cyan);
    
    log('\n‚úÖ VERIFICACI√ìN COMPLETADA', colors.bright + colors.green);
    log('üéâ El sistema de autenticaci√≥n est√° configurado correctamente', colors.green);
    log('üîê Puedes proceder a iniciar sesi√≥n como administrador', colors.green);
    
  } catch (error) {
    log(`‚ùå Error durante la verificaci√≥n: ${error.message}`, colors.red);
    console.error(error);
    process.exit(1);
  }
}

// Ejecutar verificaci√≥n
if (require.main === module) {
  main().catch(error => {
    log(`‚ùå Error fatal: ${error.message}`, colors.red);
    console.error(error);
    process.exit(1);
  });
}
